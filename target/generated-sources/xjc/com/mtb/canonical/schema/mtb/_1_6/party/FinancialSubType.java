//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.11.10 at 05:12:24 PM EST 
//


package com.mtb.canonical.schema.mtb._1_6.party;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for FinancialSub_Type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="FinancialSub_Type"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *     &lt;enumeration value="Gross"/&gt;
 *     &lt;enumeration value="Net"/&gt;
 *     &lt;enumeration value="Disposable"/&gt;
 *     &lt;enumeration value="Current"/&gt;
 *     &lt;enumeration value="Investment"/&gt;
 *     &lt;enumeration value="Tax"/&gt;
 *     &lt;enumeration value="Recurring"/&gt;
 *     &lt;enumeration value="Depreciation"/&gt;
 *     &lt;enumeration value="Dividend"/&gt;
 *     &lt;enumeration value="Turnover"/&gt;
 *     &lt;enumeration value="ContributionsToOverhead"/&gt;
 *     &lt;enumeration value="Cash"/&gt;
 *     &lt;enumeration value="LongTerm"/&gt;
 *     &lt;enumeration value="EBIT"/&gt;
 *     &lt;enumeration value="EBITDA"/&gt;
 *     &lt;enumeration value="Interest"/&gt;
 *     &lt;enumeration value="MarketableSecurities"/&gt;
 *     &lt;enumeration value="Cash_MarketableSecurities"/&gt;
 *     &lt;enumeration value="RestrictedCash"/&gt;
 *     &lt;enumeration value="UnRestrictedCash"/&gt;
 *     &lt;enumeration value="Intangible"/&gt;
 *     &lt;enumeration value="ResidentDeposit"/&gt;
 *     &lt;enumeration value="Tangible"/&gt;
 *     &lt;enumeration value="SubOrdinated"/&gt;
 *     &lt;enumeration value="BorrowedFunds_EffTNW_Ratio"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "FinancialSub_Type")
@XmlEnum
public enum FinancialSubType {

    @XmlEnumValue("Gross")
    GROSS("Gross"),
    @XmlEnumValue("Net")
    NET("Net"),
    @XmlEnumValue("Disposable")
    DISPOSABLE("Disposable"),
    @XmlEnumValue("Current")
    CURRENT("Current"),
    @XmlEnumValue("Investment")
    INVESTMENT("Investment"),
    @XmlEnumValue("Tax")
    TAX("Tax"),
    @XmlEnumValue("Recurring")
    RECURRING("Recurring"),
    @XmlEnumValue("Depreciation")
    DEPRECIATION("Depreciation"),
    @XmlEnumValue("Dividend")
    DIVIDEND("Dividend"),
    @XmlEnumValue("Turnover")
    TURNOVER("Turnover"),
    @XmlEnumValue("ContributionsToOverhead")
    CONTRIBUTIONS_TO_OVERHEAD("ContributionsToOverhead"),
    @XmlEnumValue("Cash")
    CASH("Cash"),
    @XmlEnumValue("LongTerm")
    LONG_TERM("LongTerm"),
    EBIT("EBIT"),
    EBITDA("EBITDA"),
    @XmlEnumValue("Interest")
    INTEREST("Interest"),
    @XmlEnumValue("MarketableSecurities")
    MARKETABLE_SECURITIES("MarketableSecurities"),
    @XmlEnumValue("Cash_MarketableSecurities")
    CASH_MARKETABLE_SECURITIES("Cash_MarketableSecurities"),
    @XmlEnumValue("RestrictedCash")
    RESTRICTED_CASH("RestrictedCash"),
    @XmlEnumValue("UnRestrictedCash")
    UN_RESTRICTED_CASH("UnRestrictedCash"),
    @XmlEnumValue("Intangible")
    INTANGIBLE("Intangible"),
    @XmlEnumValue("ResidentDeposit")
    RESIDENT_DEPOSIT("ResidentDeposit"),
    @XmlEnumValue("Tangible")
    TANGIBLE("Tangible"),
    @XmlEnumValue("SubOrdinated")
    SUB_ORDINATED("SubOrdinated"),
    @XmlEnumValue("BorrowedFunds_EffTNW_Ratio")
    BORROWED_FUNDS_EFF_TNW_RATIO("BorrowedFunds_EffTNW_Ratio");
    private final String value;

    FinancialSubType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static FinancialSubType fromValue(String v) {
        for (FinancialSubType c: FinancialSubType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
